<?php

const PATH_UPLOAD = "assets/uploads/";

if (!function_exists('asset')) {
	function asset($path)
	{
		return $_ENV['ASSETS'] . $path;
	}
}

if (!function_exists('routeAdmin')) {
	function routeAdmin($uri = null)
	{
		return $_ENV['BASE_URL_ADMIN'] . $uri;
	}
}

if (!function_exists('routeClient')) {
	function routeClient($uri = null)
	{
		return $_ENV['BASE_URL'] . $uri;
	}
}

if (!function_exists('upload_file')) {
	function upload_file($file)
	{
		$imagePath = PATH_UPLOAD . time() . '-' . basename($file['name']);
		if (move_uploaded_file($file['tmp_name'], $imagePath)) {
			return $imagePath;
		}
		return null;
	}
}

//if (!function_exists('upload_multifile')) {
//	function upload_multifile($image)
//	{
//		$uploadedFiles = []; // M·∫£ng l∆∞u tr·ªØ t√™n c√°c ·∫£nh ƒë√£ upload
//
//		// Loop qua t·ª´ng file ƒë∆∞·ª£c upload t·ª´ form
//		foreach ($image['tmp_name'] as $key => $tmp_name) {
//			$fileName = $image['name'][$key];
//			$fileSize = $image['size'][$key];
//			$fileTmp = $image['tmp_name'][$key];
//			$fileType = $image['type'][$key];
//
//			// Ki·ªÉm tra xem file c√≥ ph·∫£i l√† ·∫£nh kh√¥ng
//			$allowedExtensions = array("jpeg", "jpg", "png");
//			$fileParts = explode('.', $fileName);
//			$fileExtension = strtolower(end($fileParts));
//
//			if (in_array($fileExtension, $allowedExtensions) === false) {
//				echo "Ch·ªâ cho ph√©p upload file ·∫£nh c√≥ ƒë·ªãnh d·∫°ng JPEG, JPG, PNG.";
//				exit();
//			}
//
//			// T·∫°o ƒë∆∞·ªùng d·∫´n cho file upload
//			$uploadPath = PATH_UPLOAD . time() . '-' . basename($fileName);
//
//			// Di chuy·ªÉn file v√†o th∆∞ m·ª•c uploads
//			if (move_uploaded_file($fileTmp, $uploadPath)) {
//				$uploadedFiles[] = $uploadPath; // L∆∞u t√™n file v√†o m·∫£ng
//			} else {
////				echo "C√≥ l·ªói x·∫£y ra khi upload file.";
//				$_SESSION['errors']['image'] = 'C√≥ l·ªói x·∫£y ra khi upload file üò¢üòø';
//				header('location: ' . routeAdmin('products/create'));
//				exit();
//			}
//		}
//
//		// T·∫°o chu·ªói string t·ª´ t√™n c√°c ·∫£nh
//		$imageString = implode(",", $uploadedFiles);
//		// echo "C√°c ·∫£nh ƒë√£ ƒë∆∞·ª£c upload: " . $imageString;
//		return $imageString;
//	}
//}

if (!function_exists('upload_multifile')) {
	function upload_multifile($image)
	{
		$uploadedFiles = []; // M·∫£ng l∆∞u tr·ªØ t√™n c√°c ·∫£nh ƒë√£ upload

		// Loop qua t·ª´ng file ƒë∆∞·ª£c upload t·ª´ form
		foreach ($image['tmp_name'] as $key => $tmp_name) {
			$fileName = $image['name'][$key];
			$fileSize = $image['size'][$key];
			$fileTmp = $image['tmp_name'][$key];
			$fileType = $image['type'][$key];

			// T·∫°o ƒë∆∞·ªùng d·∫´n cho file upload
			$uploadPath = PATH_UPLOAD . time() . '-' . basename($fileName);

			// Di chuy·ªÉn file v√†o th∆∞ m·ª•c uploads
			if (!move_uploaded_file($fileTmp, $uploadPath)) {
				// L·ªói khi di chuy·ªÉn file, tr·∫£ v·ªÅ false
				return false;
			}

			$uploadedFiles[] = $uploadPath; // L∆∞u t√™n file v√†o m·∫£ng
		}

		return implode(",", $uploadedFiles); // Tr·∫£ v·ªÅ m·∫£ng t√™n c√°c file ƒë√£ upload
	}
}


if (!function_exists('validateImage')) {
	function validateImage($image)
	{
		if (!$image['error'][0] == UPLOAD_ERR_NO_FILE) {
			return true;
		} else {
			return false;
		}
	}
}

if (!function_exists('isInvalid')) {
	function isInvalid($data)
	{
		return !empty($data) ? "is-invalid" : "";
	}
}

if (!function_exists('setToastr')) {
	function setToastr($message, $type)
	{
		$_SESSION['message'] = $message;
		$_SESSION['type'] = $type;
	}
}

if (!function_exists('unsetSessions')) {
	function unsetSessions()
	{
		unset($_SESSION['errors']);
		unset($_SESSION['message']);
		unset($_SESSION['type']);
	}
}

if (!function_exists('getDateTime')) {
	function getDateTime()
	{
		date_default_timezone_set('Asia/Ho_Chi_Minh');
		return date('Y/m/d H:i:s');
	}
}

if (!function_exists('isEmailExists')) {
	function isEmailExists($email)
	{
		if ($email) {
			$_SESSION['errors']['email'] = 'Email already exists';
		}
	}
}

if (!function_exists('middleware_auth')) {
	function middleware_auth()
	{
		if (!isset($_SESSION['user']) || $_SESSION['user']['role'] != 1) {
			header('location: ' . routeClient());
			exit();
		}
	}
}

if (!function_exists('middleware_login')) {
	function middleware_login($password, $user)
	{
//		$check = password_verify($password, $user['password']);

//		echo "<pre>";
//		var_dump($check);
//		echo "</pre>";


		if (password_verify($password, $user['password'])) {
			$_SESSION['user'] = $user;
			if ($user['role'] == 1) {
				setToastr('Dang Nhap Thanh Cong', 'success');
				header('location: ' . routeAdmin());
				exit();
			} else {
				setToastr('Dang Nhap Thanh Cong', 'success');
				header('location: ' . routeClient());
				exit();
			}
//			echo "success";
		} else {
			$_SESSION['errors']['password'] = 'Password k chinh xac';
			header('location: ' . routeClient('login'));
			echo "failed";
		}
	}
}

if (!function_exists('middleware_user_auth')) {
	function middleware_user_auth()
	{
		if (isset($_SESSION['user'])) {
			header('location: ' . routeClient());
			exit();
		}
	}
}

if (!function_exists('active_account')) {
	function active_account()
	{
		return !isset($_SESSION['user']) ? 'login' : 'account';
	}
}
// pre - next page

if (!function_exists('prevPage')) {
	function prevPage($uri, $page)
	{
		return $page > 1 ? routeAdmin($uri . '?page=' . ($page - 1)) : routeAdmin($uri . '?page=1');
	}
}

if (!function_exists('nextPage')) {
	function nextPage($uri, $page, $totalPage)
	{
		return routeAdmin($uri . '?page=' . ($page == $totalPage ? $page : $page + 1));
	}
}

if (!function_exists('handleSalePrice')) {
	function handleSalePrice($price)
	{
		$price = floatval($price);
		return $price * 0.8;
	}
}

if (!function_exists('formatPrice')) {
	function formatPrice($price)
	{
		return number_format($price);
	}
}

if (!function_exists('isValidateMultipleImage')) {
	function isValidateMultipleImage($files)
	{
		$check = false;
		foreach ($files['error'] as $file) {
			if ($file != UPLOAD_ERR_NO_FILE) {
				$check = true;
				break;
			}
		}
		return $check;
	}
}

if (!function_exists('formatStrlen')) {
	function formatStrlen($string, $max, $length)
	{
		return strlen($string) > $max ? substr($string, 0, $length) . '...' : $string;
	}
}

// slug
if (!function_exists('createSlug')) {
	function createSlug($string)
	{
		$string = removeAccents($string);
		$string = preg_replace('/\s+/', '-', $string);
		$string = strtolower($string);
		return $string;
	}
}

if (!function_exists('removeAccents')) {
	function removeAccents($string)
	{
		$transliterationTable = array(
			'√°' => 'a', '√†' => 'a', '·∫£' => 'a', '√£' => 'a', '·∫°' => 'a',
			'ƒÉ' => 'a', '·∫Ø' => 'a', '·∫±' => 'a', '·∫≥' => 'a', '·∫µ' => 'a', '·∫∑' => 'a',
			'√¢' => 'a', '·∫•' => 'a', '·∫ß' => 'a', '·∫©' => 'a', '·∫´' => 'a', '·∫≠' => 'a',
			'√©' => 'e', '√®' => 'e', '·∫ª' => 'e', '·∫Ω' => 'e', '·∫π' => 'e',
			'√™' => 'e', '·∫ø' => 'e', '·ªÅ' => 'e', '·ªÉ' => 'e', '·ªÖ' => 'e', '·ªá' => 'e',
			'√≠' => 'i', '√¨' => 'i', '·ªâ' => 'i', 'ƒ©' => 'i', '·ªã' => 'i',
			'√≥' => 'o', '√≤' => 'o', '·ªè' => 'o', '√µ' => 'o', '·ªç' => 'o',
			'√¥' => 'o', '·ªë' => 'o', '·ªì' => 'o', '·ªï' => 'o', '·ªó' => 'o', '·ªô' => 'o',
			'∆°' => 'o', '·ªõ' => 'o', '·ªù' => 'o', '·ªü' => 'o', '·ª°' => 'o', '·ª£' => 'o',
			'√∫' => 'u', '√π' => 'u', '·ªß' => 'u', '≈©' => 'u', '·ª•' => 'u',
			'∆∞' => 'u', '·ª©' => 'u', '·ª´' => 'u', '·ª≠' => 'u', '·ªØ' => 'u', '·ª±' => 'u',
			'√Ω' => 'y', '·ª≥' => 'y', '·ª∑' => 'y', '·ªπ' => 'y', '·ªµ' => 'y',
			'ƒë' => 'd',
			'√Å' => 'A', '√Ä' => 'A', '·∫¢' => 'A', '√É' => 'A', '·∫†' => 'A',
			'ƒÇ' => 'A', '·∫Æ' => 'A', '·∫∞' => 'A', '·∫≤' => 'A', '·∫¥' => 'A', '·∫∂' => 'A',
			'√Ç' => 'A', '·∫§' => 'A', '·∫¶' => 'A', '·∫®' => 'A', '·∫™' => 'A', '·∫¨' => 'A',
			'√â' => 'E', '√à' => 'E', '·∫∫' => 'E', '·∫º' => 'E', '·∫∏' => 'E',
			'√ä' => 'E', '·∫æ' => 'E', '·ªÄ' => 'E', '·ªÇ' => 'E', '·ªÑ' => 'E', '·ªÜ' => 'E',
			'√ç' => 'I', '√å' => 'I', '·ªà' => 'I', 'ƒ®' => 'I', '·ªä' => 'I',
			'√ì' => 'O', '√í' => 'O', '·ªé' => 'O', '√ï' => 'O', '·ªå' => 'O',
			'√î' => 'O', '·ªê' => 'O', '·ªí' => 'O', '·ªî' => 'O', '·ªñ' => 'O', '·ªò' => 'O',
			'∆†' => 'O', '·ªö' => 'O', '·ªú' => 'O', '·ªû' => 'O', '·ª†' => 'O', '·ª¢' => 'O',
			'√ö' => 'U', '√ô' => 'U', '·ª¶' => 'U', '≈®' => 'U', '·ª§' => 'U',
			'∆Ø' => 'U', '·ª®' => 'U', '·ª™' => 'U', '·ª¨' => 'U', '·ªÆ' => 'U', '·ª∞' => 'U',
			'√ù' => 'Y', '·ª≤' => 'Y', '·ª∂' => 'Y', '·ª∏' => 'Y', '·ª¥' => 'Y',
			'ƒê' => 'D',
		);

		return strtr($string, $transliterationTable);
	}
}



